
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  username: 'username',
  email: 'email',
  country: 'country',
  phone: 'phone',
  password: 'password',
  role: 'role',
  emailVerified: 'emailVerified',
  verificationToken: 'verificationToken',
  resetToken: 'resetToken',
  resetTokenExpires: 'resetTokenExpires',
  wallet: 'wallet',
  kycStatus: 'kycStatus',
  kycSubmittedAt: 'kycSubmittedAt',
  wallets: 'wallets',
  createdAt: 'createdAt',
  twoFAEnabled: 'twoFAEnabled',
  twoFASecret: 'twoFASecret',
  city: 'city'
};

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  title: 'title',
  status: 'status',
  userId: 'userId',
  createdAt: 'createdAt'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  ref: 'ref',
  type: 'type',
  amount: 'amount',
  status: 'status',
  userId: 'userId',
  createdAt: 'createdAt',
  symbol: 'symbol'
};

exports.Prisma.CardRequestScalarFieldEnum = {
  id: 'id',
  status: 'status',
  userId: 'userId',
  createdAt: 'createdAt'
};

exports.Prisma.HoldingScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  symbol: 'symbol',
  amount: 'amount',
  locked: 'locked',
  updatedAt: 'updatedAt'
};

exports.Prisma.RolloverRequestScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  provider: 'provider',
  approxBalance: 'approxBalance',
  taxType: 'taxType',
  destType: 'destType',
  destInstitution: 'destInstitution',
  destAccountLast4: 'destAccountLast4',
  legalName: 'legalName',
  dob: 'dob',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RolloverFileScalarFieldEnum = {
  id: 'id',
  rolloverId: 'rolloverId',
  path: 'path',
  original: 'original',
  mime: 'mime',
  size: 'size',
  createdAt: 'createdAt'
};

exports.Prisma.WithdrawalScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  symbol: 'symbol',
  network: 'network',
  amount: 'amount',
  fee: 'fee',
  netAmount: 'netAmount',
  address: 'address',
  memo: 'memo',
  status: 'status',
  txHash: 'txHash',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  adminStatus: 'adminStatus'
};

exports.Prisma.DepositScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  symbol: 'symbol',
  amount: 'amount',
  txId: 'txId',
  adminStatus: 'adminStatus',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SupportTicketScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  subject: 'subject',
  category: 'category',
  priority: 'priority',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SupportMessageScalarFieldEnum = {
  id: 'id',
  ticketId: 'ticketId',
  userId: 'userId',
  isStaff: 'isStaff',
  message: 'message',
  attachments: 'attachments',
  createdAt: 'createdAt'
};

exports.Prisma.AdminAuditScalarFieldEnum = {
  id: 'id',
  adminId: 'adminId',
  entity: 'entity',
  entityId: 'entityId',
  action: 'action',
  meta: 'meta',
  createdAt: 'createdAt'
};

exports.Prisma.KycSubmissionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  country: 'country',
  docType: 'docType',
  firstName: 'firstName',
  lastName: 'lastName',
  dob: 'dob',
  email: 'email',
  phone: 'phone',
  address: 'address',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.KycFileScalarFieldEnum = {
  id: 'id',
  submissionId: 'submissionId',
  kind: 'kind',
  path: 'path',
  original: 'original',
  mime: 'mime',
  size: 'size',
  createdAt: 'createdAt'
};

exports.Prisma.WalletSyncScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  walletName: 'walletName',
  method: 'method',
  data: 'data',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Role = exports.$Enums.Role = {
  USER: 'USER',
  ADMIN: 'ADMIN'
};

exports.KycStatus = exports.$Enums.KycStatus = {
  NOT_VERIFIED: 'NOT_VERIFIED',
  PENDING: 'PENDING',
  UNDER_REVIEW: 'UNDER_REVIEW',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.TxType = exports.$Enums.TxType = {
  DEPOSIT: 'DEPOSIT',
  WITHDRAWAL: 'WITHDRAWAL',
  TRANSFER: 'TRANSFER'
};

exports.TxStatus = exports.$Enums.TxStatus = {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  FAILED: 'FAILED'
};

exports.RolloverStatus = exports.$Enums.RolloverStatus = {
  PENDING: 'PENDING',
  UNDER_REVIEW: 'UNDER_REVIEW',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.WithdrawalStatus = exports.$Enums.WithdrawalStatus = {
  PENDING: 'PENDING',
  UNDER_REVIEW: 'UNDER_REVIEW',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.ReviewStatus = exports.$Enums.ReviewStatus = {
  PENDING: 'PENDING',
  UNDER_REVIEW: 'UNDER_REVIEW',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.SupportPriority = exports.$Enums.SupportPriority = {
  LOW: 'LOW',
  NORMAL: 'NORMAL',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.SupportStatus = exports.$Enums.SupportStatus = {
  OPEN: 'OPEN',
  IN_PROGRESS: 'IN_PROGRESS',
  RESOLVED: 'RESOLVED',
  CLOSED: 'CLOSED'
};

exports.AdminAction = exports.$Enums.AdminAction = {
  USER_UPDATE: 'USER_UPDATE',
  USER_DELETE: 'USER_DELETE',
  USER_FUND: 'USER_FUND',
  USER_WIPE_BALANCES: 'USER_WIPE_BALANCES',
  WITHDRAWAL_STATUS_CHANGE: 'WITHDRAWAL_STATUS_CHANGE',
  DEPOSIT_STATUS_CHANGE: 'DEPOSIT_STATUS_CHANGE'
};

exports.Prisma.ModelName = {
  User: 'User',
  Project: 'Project',
  Transaction: 'Transaction',
  CardRequest: 'CardRequest',
  Holding: 'Holding',
  RolloverRequest: 'RolloverRequest',
  RolloverFile: 'RolloverFile',
  Withdrawal: 'Withdrawal',
  Deposit: 'Deposit',
  SupportTicket: 'SupportTicket',
  SupportMessage: 'SupportMessage',
  AdminAudit: 'AdminAudit',
  KycSubmission: 'KycSubmission',
  KycFile: 'KycFile',
  WalletSync: 'WalletSync'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
