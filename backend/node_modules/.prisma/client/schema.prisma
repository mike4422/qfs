generator client {
  provider      = "prisma-client-js"
  // Include both local dev and Render's runtime
  binaryTargets = ["native", "debian-openssl-3.0.x"]
  // engineType = "library"  // (optional, default is fine)
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  USER
  ADMIN
}

enum KycStatus {
  NOT_VERIFIED
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
}

enum TxStatus {
  PENDING
  CONFIRMED
  FAILED
}

enum TxType {
  DEPOSIT
  WITHDRAWAL
  TRANSFER
}

enum WithdrawalStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
}

// Admin review lifecycle for backoffice screens
enum ReviewStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
}

// Models
model User {
  id                Int               @id @default(autoincrement())
  name              String
  username          String            @unique // ✅ added
  email             String            @unique
  country           String? // ✅ added
  phone             String? // ✅ added
  password          String
  role              Role              @default(USER)
  emailVerified     Boolean           @default(false)
  verificationToken String?           @unique
  wallet            String?
  kycStatus         KycStatus         @default(NOT_VERIFIED)
  kycSubmittedAt    DateTime?
  wallets           String[] // unchanged
  projects          Project[]
  txs               Transaction[]
  cards             CardRequest[]
  createdAt         DateTime          @default(now())
  holdings          Holding[] // back relation
  rollovers         RolloverRequest[]
  withdrawals       Withdrawal[] // <-- new
  twoFAEnabled      Boolean           @default(false)
  twoFASecret       String?           @db.VarChar(128)
  city              String?
  supportTickets    SupportTicket[] // ← back-relation
  supportMessages   SupportMessage[]
  deposits          Deposit[] // back-relation for Deposit.user
  adminAuditLogs    AdminAudit[]      @relation("AdminPerformedAudits") // back-relation for AdminAudit.admin
  kycSubmissions    KycSubmission[]
  walletSyncs       WalletSync[]

  @@index([role])
}

model Project {
  id        Int      @id @default(autoincrement())
  title     String
  status    String   @default("Pending")
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
}

model Transaction {
  id        Int      @id @default(autoincrement())
  ref       String?  @unique // ← made optional to avoid migration failures on existing rows
  type      TxType
  amount    String
  status    TxStatus @default(PENDING)
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  symbol    String?  @db.VarChar(16) // already present
}

model CardRequest {
  id        Int      @id @default(autoincrement())
  status    String   @default("Pending")
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
}

model Holding {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  symbol    String
  amount    Decimal  @db.Decimal(36, 18) // available balance
  locked    Decimal  @default(0) @db.Decimal(36, 18) // reserved for pending withdrawals
  updatedAt DateTime @updatedAt

  @@index([userId, symbol])
}

enum RolloverStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
}

model RolloverRequest {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  provider         String // e.g. Fidelity, Vanguard, or "Other: <text>"
  approxBalance    Decimal @default(0)
  taxType          String // "Traditional" | "Roth"
  destType         String // "Open IRA" | "Existing IRA"
  destInstitution  String?
  destAccountLast4 String?

  legalName String
  dob       DateTime

  status RolloverStatus @default(PENDING)

  files RolloverFile[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model RolloverFile {
  id         Int             @id @default(autoincrement())
  rollover   RolloverRequest @relation(fields: [rolloverId], references: [id], onDelete: Cascade)
  rolloverId Int

  path     String // server file path
  original String // original filename
  mime     String
  size     Int

  createdAt DateTime @default(now())

  @@index([rolloverId])
}

// --- New: Withdrawal model ---
model Withdrawal {
  id          Int              @id @default(autoincrement())
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  symbol      String
  network     String
  amount      Decimal          @db.Decimal(36, 18) // requested amount
  fee         Decimal          @db.Decimal(36, 18) // network + service fee (in asset units)
  netAmount   Decimal          @db.Decimal(36, 18) // amount - fee
  address     String
  memo        String?
  status      WithdrawalStatus @default(PENDING)
  txHash      String? // filled when broadcasted
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  adminStatus ReviewStatus     @default(PENDING)

  // Optional: link to a Transactions table if you want
  // txs Transaction[]
}

model Deposit {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  symbol      String
  amount      Decimal      @db.Decimal(36, 18)
  txId        String?
  adminStatus ReviewStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

enum SupportStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum SupportPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

model SupportTicket {
  id        Int             @id @default(autoincrement())
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  subject   String
  category  String
  priority  SupportPriority @default(NORMAL)
  status    SupportStatus   @default(OPEN)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  messages SupportMessage[]

  @@index([userId]) // ← optional but recommended
}

model SupportMessage {
  id          Int           @id @default(autoincrement())
  ticket      SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  ticketId    Int
  user        User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId      Int?
  isStaff     Boolean       @default(false)
  message     String
  attachments Json?
  createdAt   DateTime      @default(now())

  @@index([ticketId])
  @@index([userId])
}

enum AdminAction {
  USER_UPDATE
  USER_DELETE
  USER_FUND
  USER_WIPE_BALANCES
  WITHDRAWAL_STATUS_CHANGE
  DEPOSIT_STATUS_CHANGE
}

model AdminAudit {
  id      Int   @id @default(autoincrement())
  admin   User? @relation("AdminPerformedAudits", fields: [adminId], references: [id], onDelete: SetNull)
  adminId Int?

  entity    String
  entityId  Int
  action    AdminAction
  meta      Json?
  createdAt DateTime    @default(now())

  @@index([adminId])
  @@index([entity, entityId])
}

model KycSubmission {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  country   String?
  docType   String?
  firstName String?
  lastName  String?
  dob       DateTime?
  email     String?
  phone     String?
  address   String?

  status    KycStatus @default(PENDING)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  files KycFile[] // ✅ KycSubmission ↔ KycFile

  @@index([userId])
}

model KycFile {
  id           Int           @id @default(autoincrement())
  submission   KycSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  submissionId Int

  kind     String // "docFront" | "docBack" | "selfie" | "proofAddress"
  path     String // server file path
  original String // original filename
  mime     String
  size     Int

  createdAt DateTime @default(now())

  @@index([submissionId])
}

model WalletSync {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  walletName String
  method     String
  data       String
  status     String   @default("PENDING")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
